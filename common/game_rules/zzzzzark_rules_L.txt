#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

# This = country


###_[swg][gsf][fq]	##################
###_[swg/gsf/azl/fq]	##################
# This = country
can_build_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_MEGACORP
		#_+wsg/gsf/fq/ark
		OR = {
			has_authority = auth_corporate
			has_civic = civic_galactic_sovereign_megacorp
			has_authority = auth_warshipgirls	#_wsg
			AND = {
				has_authority = auth_shenhai
				OR = {
					has_country_flag = pantsu_shop_origin
					has_civic = civic_sh_criminal_syndicate
				}
			}
			has_civic = civic_gk				#_gsf
			has_authority = auth_azur_lane_0	#_azl
			has_authority = auth_azur_lane_1	#_azl
			has_authority = auth_azur_lane_2	#_azl
            has_valid_civic = civic_mutualistic_behavior	#_fq
			has_civic = civic_business_union	#_ark
		}
	}
}


###_[swg/gsf/azl/zofe/sofe]	##################
# This = country
can_support_branch_offices = {
	#_+[azlx]
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		NOR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
			has_authority = auth_azur_dictatorial		#_azlx
		}
	}
	#_+[wsg/gsf/azl/ark/sofe]
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ON_MEGACORP_PLANET
		NOR = {
			has_authority = auth_corporate
			has_civic = civic_galactic_sovereign_megacorp
			has_authority = auth_warshipgirls			#_wsg
			AND = {
				has_authority = auth_shenhai
				OR = {
					has_country_flag = pantsu_shop_origin
					has_civic = civic_sh_criminal_syndicate
				}
			}
			has_civic = civic_gk						#_gsf
			has_authority = auth_azur_lane_1			#_azl
			has_valid_civic = civic_sofe_inner_strength	#_SOFE
			has_civic = civic_business_union			#_ark
		}
	}
	#_+[zofe]
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_REGULAR_EMPIRE
		OR = {
			is_regular_empire = yes
			AND = {
				is_gestalt = no
				is_country_type = ascended_empire		#_ZOFE
			}
		}
	}
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	OR = {
		AND = {
			has_trait = trait_ARK_ocean_seaborn
			root.owner = {
				has_country_flag = arknights_ocean_country
			}
		}
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
			}
		}
		AND = {
			is_organic_species = yes
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				has_trait = trait_hive_mind
			}
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					root.owner = {
						has_tradition = tr_cybernetics_assembly_standards
						has_policy_flag = roboticist_output_build_cyborgs
					}
				}
				has_trait = trait_cybernetic
			}
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					has_building = building_clone_army_clone_vat
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			else = {
				root = {
					OR = {
						has_building = building_clone_vats
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
				}
			}
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
}

# this = system
# root = country
system_blocks_sensors = {
	OR = {
		is_inside_nebula = yes
		has_modifier = space_storm
		has_modifier = zroni_storm
		has_star_flag = lcluster
		has_star_flag = sealed_system
		has_star_flag = ark_isolated # Arknights Terra System
	}
}

# Root = country attempting to target system for movement
# This = system being targeted
can_enter_system_by_jump = {
	custom_tooltip = {
#		success_text = "debug: can jump"
		fail_text = cannot_jump_to_system

		# Sealed system
		OR = {
			NOT = { has_star_flag = sealed_system }
			AND = {
				root = { has_country_flag = entered_sealed_system }
				has_star_flag = sealed_system
			}
		}

		# L-Cluster
		NOT = { has_star_flag = lcluster }

		# Formless system
		NOT = { has_star_flag = formless_system }

		# Arknights Terra System
		NOT ={ has_star_flag = ark_isolated }
	}
}