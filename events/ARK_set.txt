namespace = ark_set

# 强制修改非明日方舟国家选择的mod内容
country_event = {
	id = ark_set.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOR = {
			has_country_flag = arknight_1
			has_country_flag = arknight_2
			has_country_flag = arknight_3
			has_country_flag = arknight_4
		}
		OR = {
			has_authority = auth_city_republic
			has_authority = auth_city_despotism
		}
	}

	immediate = {
		if = {
			limit = { has_authority = auth_city_republic }
			change_government = {
				authority = auth_oligarchic
				civics = {
					civic = random
					civic = random
				}
			}
		}
		if = {
			limit = { has_authority = auth_city_despotism }
			change_government = {
				authority = auth_dictatorial
				civics = {
					civic = random
					civic = random
				}
			}
		}
	}
}

# 检查并重置领袖肖像
country_event = {
	id = ark_set.3
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				NOT = { has_country_flag = ark_synthetic_evolution }
			}
			every_owned_leader = {	# 凯尔希
				limit = {
					has_leader_flag = ark_leader_kaltsit
				}
				change_leader_portrait = ARK003
			}
			every_owned_leader = {	# 博士_L
				limit = {
					has_leader_flag = ark_leader_doctor
					has_trait = trait_ruler_babel_evil_spirit_l
			}
				change_leader_portrait = ARK001
			}
			every_owned_leader = {	# 博士_W
				limit = {
					has_leader_flag = ark_leader_doctor
					has_trait = trait_ruler_babel_evil_spirit_w
				}
				change_leader_portrait = ARK001_W
			}
			every_owned_leader = {	# 博士_R
				limit = {
					has_leader_flag = ark_leader_doctor
					has_trait = trait_ruler_babel_evil_spirit_r
				}
				change_leader_portrait = ARK001_R
			}
			every_owned_leader = {	# 陈
				limit = {
					has_leader_flag = ark_leader_chen
				}
				change_leader_portrait = ARK010
			}
				every_owned_leader = {	# 可露希尔
				limit = {
					has_leader_flag = ark_leader_closure
				}
				change_leader_portrait = ARK007
			}
			every_owned_leader = {	# 赫默
				limit = {
					has_leader_flag = ark_leader_silence
				}
				change_leader_portrait = ARK108
			}
			every_owned_leader = {	# 温蒂
				limit = {
					has_leader_flag = ark_leader_weedy
				}
				change_leader_portrait = ARK400
			}
			every_owned_leader = {	# 梅尔
				limit = {
					has_leader_flag = ark_leader_mayer
				}
				change_leader_portrait = ARK242
			}
			every_owned_leader = {	# 雪雉
				limit = {
					has_leader_flag = ark_leader_snowsant
				}
				change_leader_portrait = ARK383
			}
			every_owned_leader = {	# 麦哲伦
				limit = {
					has_leader_flag = ark_leader_magallan
				}
				change_leader_portrait = ARK248
			}
		}
	}
}

# 检查并清除“源石病”特性
country_event = {
	id = ark_set.4
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_country_flag = ark_hospital123
	}

	immediate = {
		every_owned_pop = {
			limit = {
				is_same_species = root
				NOT = { species = { has_trait = trait_Originium_Arts } }
				species = { has_trait = trait_latent_oripathy }
			}
			modify_species = {
				species = this
				add_trait = trait_Originium_Arts
				remove_trait = trait_latent_oripathy
			}
		}
		every_owned_leader = {
			limit = { has_trait = leader_trait_oripathy }
			remove_trait = leader_trait_oripathy
		}
	}
}

# 创建泰拉小车机器人
country_event = {
	id = ark_set.5
	hide_window = yes

	trigger = {
		OR = {
			has_country_flag = arknight_1
			has_country_flag = arknight_2
			has_country_flag = arknight_4
		}
		any_owned_planet = {
			OR = {
				has_building = building_robot_assembly_plant
				has_building = building_machine_assembly_plant
			}
		}
		NOT = { has_country_flag = create_ark_robot }
	}

	immediate = {
		set_country_flag = create_ark_robot
		create_species = {
			name = terra_creation
			namelist = root
			plural = terra_creation_plural
			class = ArkRobot
			portrait = "terra_creation"
			traits = {
				trait = trait_mechanical
			}
			effect = {
				save_global_event_target_as = ark_robot_species
			}
		}
	}
}

# 将组建的一个机器/机械人修改物种为泰拉小车
planet_event = {
	id = ark_set.51
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = {
			OR = {
				has_country_flag = arknight_1
				has_country_flag = arknight_2
				has_country_flag = arknight_4
			}
			NOT = { has_country_flag = had_ark_robot }
		}
		fromfrom = { has_trait = trait_mechanical }
	}

	immediate = {
		owner = { set_country_flag = had_ark_robot }
		fromfrom = {
			if = { 
				limit = { has_trait = trait_mechanical }
				change_species = event_target:ark_robot_species
			}
		}
	}
}

# 机飞之后全员成为泰拉小车
country_event = {
	id = ark_set.52
	hide_window = yes

	trigger = {
		OR = {
			has_country_flag = arknight_1
			has_country_flag = arknight_2
			has_country_flag = arknight_4
		}
		has_ascension_perk = ap_synthetic_evolution	# 已选飞升：合成进化
		has_country_flag = synthetic_empire			# 是合成人帝国
		NOT = { has_country_flag = ark_synthetic_evolution }
	}

	immediate = {
		set_country_flag = ark_synthetic_evolution
		if = {
			limit = {
				NOT = { has_country_flag = had_ark_robot }
			}
			set_country_flag = had_ark_robot
		}
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_mechanical
				}
			}
			change_species = event_target:ark_robot_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_mechanical
				}
			}
			change_species = event_target:ark_robot_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
			}
			modify_army = {
				species = event_target:ark_robot_species
			}
		}

		every_owned_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			change_species = event_target:ark_robot_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			change_species = event_target:ark_robot_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:ark_robot_species }
	}
}